`include "sys_defs.svh"

/* in this code we use the sq only
    and for the load instruction we only allow it issue when all of the store instructions before it has completed
    there is no load queue
*/

module lsq(
    input clock, reset,
    // input from dispatch stage
    input logic     [`SUPERSCALAR_WAYS - 1 : 0] dispatch_is_store,  // the store insts dispatched in this cycle;
    input logic     [`SUPERSCALAR_WAYS - 1 : 0] dispatch_is_load,   // the load insts dispatched in this cycle;

    /* output to RS // seems that we don't need this because dispatch stage already computed that
    output logic    [`SUPERSCALAR_WAYS - 1 : 0] load_en, // which one is load
    // the above might be omitted if the connection section includes reg to temporarily store the enable bits from the last cycle.
    output LSQ_IDX  [`SUPERSCALAR_WAYS - 1 : 0] load_indexes, // to compute how many store before this load?
    */

    // input from FU, need to tag valid bit, store's&load's addr, store's data
    input LSQ_ENTRY [`NUM_FU_STORE - 1 : 0]     store_entry,  // the store entity completed in this cycle;
    input LSQ_ENTRY [`NUM_FU_LOAD - 1 : 0]      load_entry, // only addr and size is vaild when input this packet   
    
    // input from ROB(retire stage)
    input logic     [`SUPERSCALAR_WAYS - 1 :0]  retire_enable,   

    // input valid bit from Dcache
    input logic                                 dcache_valid,

    // output the entry when request for access the Dcache, after that, we set the ready bit to 1 
    output DCACHE_REQUEST                       request_to_dcache, 
    output logic                                request_enable,

    // nego
    output LSQ_SPACE                            remain, // how many store next cycle could dispatch
    output logic    [`NUM_FU_LOAD - 1 : 0]      load_complete, // for nego with FU_load 
    output LSQ_IDX                              current_tail
);
    logic           [`LSQ_DEPTH - 1 : 0]        lsq_enable;    // current lsq enable
    logic           [`LSQ_DEPTH - 1 : 0]        next_lsq_enable;  // the remain space in the lsq
    logic           [`NUM_FU_LOAD - 1 : 0]      wait_lsq;   // use for stall load 1 means the load can not go into sq
    
    logic           [`NUM_FU_LOAD - 1 : 0]      load_request_enable; // request Dcache to access the data
    logic                                       store_request_enable; // request Dcache to access the data
    
    LSQ_QUEUE                                   current_lsq , next_lsq; // state
    
    logic [`SUPERSCALAR_WAYS-1:0][`LSQ_IDX_WIDTH-1:0] head_idx;  // head+0, head+1, head+2
    logic [`SUPERSCALAR_WAYS-1:0][`LSQ_IDX_WIDTH-1:0] tail_idx;  // tail+0, tail+1, tail+2

    logic                                       load_selected;  //  select
    logic                                       store_selected;
    logic [`NUM_FU_LOAD-1:0]                    load_issued;    // whether the load has sent the request to dcache
    logic [`NUM_FU_LOAD-1+1: 0 ]                total_enable;   // this is the sum of the load and store enable
    //load first
    assign store_request_enable = current_lsq.lsq_entry[current_lsq.head].store_retired;
    assign total_enable = {store_request_enable, load_request_enable};

    parking_selector_input #(
        .POOL_SIZE(`LSQ_DEPTH),
        .MAX_INPUT_SIZE(`SUPERSCALAR_WAYS),
        .data_t(LSQ_ENTRY)
    ) parking_selector_input_inst (
        .input_enable(dispatch_is_store),
        .input_data('{default: '0}),
        .data_vector(current_lsq.lsq_entry),
        .free_vector(lsq_enable),
        .next_free_vector(next_lsq_enable),
        .input_served_mask(),
        .input_assigned_mask(),
        .input_assigned_spot(),
        .next_data_vector(next_lsq.lsq_entry),
        .dbg_gnt_bus()
    );

    

    assign load_en = dispatch_is_load;
    assign remain = $countones(lsq_enable);
    assign retire_cnt = $countones(retire_enable);  // fake retire cnt (1 store or load per cycle, so can't retire all)
    assign pop_cnt = store_selected; // actual retire cnt, 0 or 1
    assign store_cnt = $countones(is_store);
    always_comb begin 
        for(int i = 0; i < retire_cnt; i++) begin 
            head_idx[i] = (current_lsq.head+i)%`LSQ_DEPTH; 
        end 
        for(int i = 0; i < store_cnt; i++) begin 
            tail_idx[i] = (current_lsq.tail+i)%`LSQ_DEPTH; 
        end 
    end 
    assign current_tail = current_lsq.tail;

    //update next_lsq, including the new element, head, and tail
    always_comb begin
        next_lsq = current_lsq;
        if (current_lsq.state == EMPTY &  store_cnt-pop_cnt > 0) begin 
            next_lsq.state = NON_EMPTY;  
        end else if (current_lsq.state == NON_EMPTY & (current_lsq.lsq_size-pop_cnt+store_cnt == 0)) begin 
            next_lsq.state = EMPTY; 
        end 
        for(int i=0; i<`SUPERSCALAR_WAYS; i++) begin
            if(dispatch_is_store[i]) begin    
                next_lsq.lsq_entry[tail_idx[i]] = '{default:'0};
                next_lsq.lsq_entry[tail_idx[i]].entry_idx = tail_idx[i];
            end
        end
        for(int i=0; i<retire_cnt; i++) begin
            next_lsq.lsq_entry[head_idx[i]].store_retired = 1;
        end
        next_lsq.tail = (next_lsq.head + store_cnt)%`LSQ_DEPTH;
        next_lsq.head = (next_lsq.head + pop_cnt)%`LSQ_DEPTH;
    end
    
    // update wait_lsq
    always_comb begin
        wait_lsq = 0; 
    outer_loop:
        for(int i = 0 ; i <`NUM_FU_LOAD ; i++) begin
            if(~load_entry[i].valid || current_lsq.head == load_entry[i].entry_idx) begin
                continue;
            end
            if(current_lsq.head < load_entry[i].entry_idx) begin
                for(int j = current_lsq.head ; j < load_entry[i].entry_idx ; j++)begin
                    if (~current_lsq.lsq_entry[j].ready) begin
                            wait_lsq[i] = 1;
                            break outer_loop;  // Exit loop early if any entry is not ready
                    end
                end
            end else begin
                    for (int j = current_lsq.head; j < `LSQ_DEPTH; j++) begin
                        if (~current_lsq.lsq_entry[j].ready) begin
                            wait_lsq[i] = 1;
                            break outer_loop;
                        end
                    end
                    if (!wait_lsq[i]) begin
                        for (int j = 0; j < load_entry[i].entry_idx; j++) begin
                            if (~current_lsq.lsq_entry[j].ready) begin
                                wait_lsq[i] = 1;
                                break outer_loop;
                            end
                        end
                    end
            end
        end
    end
   
    // mask
    BYTE_MASK mask_internal;
    MEM_BLOCK data_internal;        
    always_comb begin
        mask_internal = 0;
        data_internal = '{default:'0};
        for (int i = 0 ;  i < `NUM_FU_LOAD ; i++)begin
            if(!wait_lsq[i] && load_entry[i].valid && ~load_entry[i].load_issued) begin
                load_entry[i].data = 0;
                if(current_lsq.head == load_entry[i].entry_idx) begin
                    load_request_enable[i] = 1;
                    continue;
                end
                // combine the mask
                if(current_lsq.head < load_entry[i].entry_idx) begin
                    for(int j = current_lsq.head; j < load_entry[i].entry_idx ; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            merge_byte_mask_and_data(current_lsq.lsq_entry[j].data, current_lsq.lsq_entry[j].mask, data_internal, mask_internal, data_internal, mask_internal);
                        end  
                    end
                // for the condition that the head is larger than the entry_idx
                end else begin
                    // from the head to lsq bottom
                    for (int j = current_lsq.head; j < `LSQ_DEPTH; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            merge_byte_mask_and_data(current_lsq.lsq_entry[j].data, current_lsq.lsq_entry[j].mask, data_internal, mask_internal, data_internal, mask_internal);
                        end  
                    end
                    
                    // from bottom to the entry_idx

                    for (int j = 0; j < load_entry[i].entry_idx; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            merge_byte_mask_and_data(current_lsq.lsq_entry[j].data, current_lsq.lsq_entry[j].mask, data_internal, mask_internal, data_internal, mask_internal);
                        end
                    end
                end
    
                // forwarding
                if((mask_internal & load_entry[i].mask) == load_entry[i].mask) begin
                    for (int k = 0; k < load_entry[i].mem_size; k++) begin
                        if (load_entry[i].mask[k]) begin // load which byte?
                            load_entry[i].data.byte_level[k] = data_internal.byte_level[k];  
                        end
                    end
                    load_entry[i].ready = 1;
                // load can not forwarding then go to $D
                end else begin
                    load_request_enable[i]  = 1;
                end
            end
        end
    end

    // select which instruction connect with $D
    always_comb begin
        load_selected  = |total_enable[`NUM_FU_LOAD - 1 : 0];
        store_selected = (total_enable[`NUM_FU_LOAD - 1 : 0] == 0) && (total_enable[`NUM_FU_LOAD] == 1);
        request_enable = |total_enable[`NUM_FU_LOAD : 0];
        if (load_selected) begin
            
        end
        
        if(store_selected) begin
            
        end
        
        /*
        for(int i = 0; i < `NUM_FU_LOAD + 1;  i++)begin
            if(total_enable[i] & dcache_valid) begin
                request_enable = 1;
                request_to_dcache = total_request_packet[i];
                break;
            end
        end
        */
    end

    //load to dcache
    always_comb begin
        next_load_issued=load_issued;
        for(int i=0; i < `NUM_FU_LOAD ; i++) begin
            if(load_selected[i]) begin
                next_load_issued[i]=1;
                break;
            end
        end
    end

    //input from the FU
    always_comb begin
        for (int j = 0; j < `NUM_FU_STORE; j++) begin
            current_lsq.lsq_entry[store_entry[j].entry_idx] = store_entry[j];
        end
    end
          
    //FSM
    always_ff@(posedge clock)begin
        if(reset)begin
            current_lsq.lsq_entry <= '{default: '0};
            current_lsq.state <= EMPTY;
            current_lsq.head <= 0;
            current_lsq.tail <= 0;
            current_lsq.lsq_size <= 0;
            load_issued <= 0;
        end else begin
            current_lsq <= next_lsq;
            load_issued <= next_load_issued;
        end
    end




    
/*
    logic                              load_dcache_request_valid;
    logic                              load_dcache_response_valid;
    DCACHE_RESPONSE                    load_output;

    load_to_dcache load_to_dcache_inst(
        .clock(clock),
        .reset(reset),
        .load_dcache_request_valid(load_dcache_request_valid),
        .load_dcache_response_valid(load_dcache_response_valid),
        .load_output(load_output)
    );

    // connect with $D
    always_comb begin
        if(load_dcache_request_valid)begin
            load_occupied = 0;
            for(int i = 0 ; i < `SUPERSCALAR_WAYS ; i++)begin
                if(output_load.block_addr = load_entry[i].addr & load_entry[i].connect_with_dcache)begin
                    for (int k = 0; k < load_entry[i].mem_size; k++) begin
                            if (load_entry[i].mask[k]) begin // load which byte?
                                load_entry[i].data[k*8 +: 8] = output_load.block_data[k*8 +: 8];
                            end
                        end
                        load_entry[i].ready = 1;
                end
            end
        end else begin
            load_occupied = 1;
            request_load_to_dcache.data =  load_tmp.data;
            request_load_to_dcache.mem_size = load_tmp.mem_size;
            request_load_to_dcache.is_load  = 1;
        end
    end

    //complete stage


    always_comb begin
        load_complete = '0;
        for (int i = 0 ; i < `NUM_FU_LOAD ; i++)begin
            if(load_entry[i].ready)begin
                load_complete[i] = 1;
            end
        end
    end
*/
    /*
    // the index to RS
    always_comb begin
        for (int i = 0; i < `SUPERSCALAR_WAYS; i++) begin
            if(dispatch_is_load[i]) begin
                load_indexes[i] = $countones(dispatch_is_store & ({`SUPERSCALAR_WAYS{1'b1}} >> (`SUPERSCALAR_WAYS - i)))+current_lsq.tail;
            end
            else begin
                load_indexes[i] = current_lsq.tail;
            end
        end
    end
    */

    /*    // mask
    LSQ_MASK mask_internal;
    DATA     data_internal;
    LSQ_ENTRY tmp_load;
    logic load_occupied;               
    always_comb begin
        mask_internal = 0;
        data_internal = 0;
        request_load_to_dcache =  '{default: '0};
        tmp_load = '{default: '0};
        load_occupied = 0;
        for (int i = 0 ;  i < `NUM_FU_LOAD ; i++)begin
            if(!wait_lsq[i] && load_entry[i].valid) begin
                load_entry[i].data = 0;
                if(current_lsq.head == load_entry[i].entry_idx) begin
                    request_load[i] =  load_entry[i];
                    continue;
                end
                // combine the mask
                if(current_lsq.head < load_entry[i].entry_idx) begin
                    for(int j = current_lsq.head ; j < load_entry[i].entry_idx ; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            for (int k = 0; k < 8; k++) begin
                                if (current_lsq.lsq_entry[j].mask[k]) begin // once there is a new byte, overwrite
                                    data_internal[k*8 +: 8] = current_lsq.lsq_entry[j].data[k*8 +: 8];
                                end else begin // only mask_internal is 0 or both of them are 0, these two case are the same
                                    data_internal[k*8 +: 8] = data_internal[k*8 +: 8];
                                end 
                            end
                            mask_internal = mask_internal | current_lsq.lsq_entry[j].mask;
                        end  
                    end
                // for the condition that the head is larger than the entry_idx
                end else begin
                    // from the head to lsq bottom
                    for (int j = current_lsq.head; j < `LSQ_DEPTH; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            for (int k = 0; k < 8; k++) begin
                                if (current_lsq.lsq_entry[j].mask[k]) begin // once there is a new byte, overwrite
                                    data_internal[k*8 +: 8] = current_lsq.lsq_entry[j].data[k*8 +: 8];
                                end else begin // only mask_internal is 0 or both of them are 0, these two case are the same
                                    data_internal[k*8 +: 8] = data_internal[k*8 +: 8];
                                end 
                            end
                            mask_internal = mask_internal | current_lsq.lsq_entry[j].mask;
                        end  
                    end
                    
                    // from bottom to the entry_idx

                    for (int j = 0; j < load_entry[i].entry_idx; j++) begin
                        if(current_lsq.lsq_entry[j].addr = load_entry[i].addr) begin
                            for (int k = 0; k < 8; k++) begin
                                if (current_lsq.lsq_entry[j].mask[k]) begin // once there is a new byte, overwrite
                                    data_internal[k*8 +: 8] = current_lsq.lsq_entry[j].data[k*8 +: 8];
                                end else begin // only mask_internal is 0 or both of them are 0, these two case are the same
                                    data_internal[k*8 +: 8] = data_internal[k*8 +: 8];
                                end 
                            end
                            mask_internal = mask_internal | current_lsq.lsq_entry[j].mask;
                        end
                    end
                end
    
                // forwarding
                if((mask_internal & load_entry[i].mask) == load_entry[i].mask) begin
                    for (int k = 0; k < load_entry[i].mem_size; k++) begin
                        if (load_entry[i].mask[k]) begin // load which byte?
                            load_entry[i].data[k*8 +: 8] = data_internal[k*8 +: 8];
                        end
                    end
                    load_entry[i].ready = 1;
                end else begin
                    load_entry[i].connect_with_dcache = 1;
                    request_load_to_dcache.addr =  load_entry[i].addr; // TODO: from $D
                    request_load_to_dcache.data =  load_entry[i].data;
                    request_load_to_dcache.mem_size = load_entry[i].mem_size;
                    request_load_to_dcache.is_load  = 1;
                    load_tmp                        = load_entry[i];
                    load_occupied                   = 1;   
                    break; // when the lsq begin to request stop the loop because the $D can only handle one load/store per cycle
                end

            end
        end
    end*/

endmodule